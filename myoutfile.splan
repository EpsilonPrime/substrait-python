pipelines {
  read -> filter -> project -> aggregate -> sort -> root;
}

read relation read {
  source named;
  base_schema schema;
}

filter relation filter {
  filter lte(schema.L_SHIPDATE, 
    subtract("1998-12-01"_date, {120_days, 0_seconds, 0_microseconds}_interval_day)->date)->bool?;
}

project relation project {
  expression schema.L_RETURNFLAG;
  expression schema.L_LINESTATUS;
  expression schema.L_QUANTITY;
  expression schema.L_EXTENDEDPRICE;
  expression multiply(schema.L_EXTENDEDPRICE, 
    subtract2(1_i32 AS decimal?<19,0>, schema.L_DISCOUNT)->decimal?<19,0>)->decimal?<19,0> NAMED intermediate;
  expression multiply(
    multiply(schema.L_EXTENDEDPRICE, 
      subtract2(1_i32 AS decimal?<19,0>, schema.L_DISCOUNT)->decimal?<19,0>)->decimal?<19,0>, 
    add(1_i32 AS decimal?<19,0>, schema.L_TAX)->decimal?<19,0>)->decimal?<19,0> NAMED intermediate2;
  expression schema.L_DISCOUNT;

  emit schema.L_RETURNFLAG;
  emit schema.L_LINESTATUS;
  emit schema.L_QUANTITY;
  emit schema.L_EXTENDEDPRICE;
  emit intermediate;
  emit intermediate2;
  emit schema.L_DISCOUNT;
}

aggregate relation aggregate {
  grouping schema.L_RETURNFLAG;
  grouping schema.L_LINESTATUS;
  measure {
    measure sum(schema.L_QUANTITY)->decimal?<19,0>@AGGREGATION_PHASE_INITIAL_TO_RESULT NAMED measurename;
    invocation all;
  }
  measure {
    measure sum(schema.L_EXTENDEDPRICE)->decimal?<19,0>@AGGREGATION_PHASE_INITIAL_TO_RESULT NAMED measurename2;
    invocation all;
  }
  measure {
    measure sum(intermediate)->decimal?<19,0>@AGGREGATION_PHASE_INITIAL_TO_RESULT NAMED measurename3;
    invocation all;
  }
  measure {
    measure sum(intermediate2)->decimal?<19,0>@AGGREGATION_PHASE_INITIAL_TO_RESULT NAMED measurename4;
    invocation all;
  }
  measure {
    measure avg(schema.L_QUANTITY)->decimal?<19,0>@AGGREGATION_PHASE_INITIAL_TO_RESULT NAMED measurename5;
    invocation all;
  }
  measure {
    measure avg(schema.L_EXTENDEDPRICE)->decimal?<19,0>@AGGREGATION_PHASE_INITIAL_TO_RESULT NAMED measurename6;
    invocation all;
  }
  measure {
    measure avg(schema.L_DISCOUNT)->decimal?<19,0>@AGGREGATION_PHASE_INITIAL_TO_RESULT NAMED measurename7;
    invocation all;
  }
  measure {
    measure count()->i64@AGGREGATION_PHASE_INITIAL_TO_RESULT NAMED measurename8;
    invocation all;
  }
}

sort relation sort {
  sort schema.L_RETURNFLAG by ASC_NULLS_LAST;
  sort schema.L_LINESTATUS by ASC_NULLS_LAST;
}

root {
  names = [
    L_RETURNFLAG,
    L_LINESTATUS,
    SUM_QTY,
    SUM_BASE_PRICE,
    SUM_DISC_PRICE,
    SUM_CHARGE,
    AVG_QTY,
    AVG_PRICE,
    AVG_DISC,
    COUNT_ORDER
  ]
}

schema schema {
  L_ORDERKEY i64;
  L_PARTKEY i64;
  L_SUPPKEY i64;
  L_LINENUMBER i32?;
  L_QUANTITY decimal?<19,0>;
  L_EXTENDEDPRICE decimal?<19,0>;
  L_DISCOUNT decimal?<19,0>;
  L_TAX decimal?<19,0>;
  L_RETURNFLAG fixedchar?<1>;
  L_LINESTATUS fixedchar?<1>;
  L_SHIPDATE date?;
  L_COMMITDATE date?;
  L_RECEIPTDATE date?;
  L_SHIPINSTRUCT fixedchar?<25>;
  L_SHIPMODE fixedchar?<10>;
  L_COMMENT varchar?<44>;
}

source named_table named {
  names = [
    "LINEITEM",
  ]
}

extension_space /functions_aggregate_generic.yaml {
  function count:any as count;
}

extension_space /functions_arithmetic_decimal.yaml {
  function add:dec_dec as add;
  function avg:dec as avg;
  function multiply:dec_dec as multiply;
  function subtract:dec_dec as subtract2;
  function sum:dec as sum;
}

extension_space /functions_datetime.yaml {
  function lte:date_date as lte;
  function subtract:date_day as subtract;
}
